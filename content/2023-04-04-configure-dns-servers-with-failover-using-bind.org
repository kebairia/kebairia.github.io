#+TITLE: Configure DNS servers with failover using BIND
#+SUBTITLE: -- 
#+AUTHOR: Zakaria.K 
#+EMAIL: 4.kebairia@gmail.com 
#+DATE: 04 Apr 2023 Tue 
#+KEYWORDS: blog,
#+OPTIONS: html5-fancy:t tex:t
#+begin_date
{{{date}}}
#+end_date

- I want to create a repeatable way to install and deploy my homelab, and all the nodes and services that I need to use day to day.

We will be setting up DNS failover using a Master/Slave configuration and configuring dynamic updates.
We have installed and configured two **RockyLinux9** servers (minimal version) with the following:

- The homelab subnet will be =10.10.0.0/24=
- MAC address on each VM is configured so that I can have a good control on my nodes, and also this will help me with the DHCP server to assign static IP addresses for these nodes
    - All MAC addresses will start with =00:2A:31:00:00:<IP>=
    - for example, my admin1.hl.test node with the IP 10.10.0.2 will have the following MAC address "00:2A:31:00:00:02"

| Name   | Hostname       | Role   | IP Address   | SELinux   |
|--------+----------------+--------+--------------+-----------|
| /      | <              | <      | <            | <         |
| admin1 | admin1.hl.test | Master | 10.10.0.2/24 | Enforcing |
| admin2 | admin2.hl.test | Slave  | 10.10.0.3/24 | Enforcing |

* Configure Master DNS Server

Let’s start by installing the required packages

#+begin_src sh
$ sudo dnf install bind bind-utils
$ sudo systemctl enable named
#+end_src

Configure your firewall, we need to allow inbound traffic on port 53 (DNS official port)

if you’re using IPtables 

#+begin_src sh
$ sudo iptables -A INPUT -s 10.10.0.0/24 -p tcp -m state --state NEW --dport 53 -j ACCEPT
$ sudo iptables -A INPUT -s 10.10.0.0/24 -p udp -m state --state NEW --dport 53 -j ACCEPT
#+end_src

Let’s check out our modification

#+begin_src sh
$ sudo iptables -L
#+end_src

If you’re using firewalld

#+begin_src sh
$ sudo firewall-cmd --add-service=dns --permanent
$ sudo firewall-cmd --reload
#+end_src

then, let’s check out our modification

#+begin_src sh
$ sudo firewall-cmd --list-all
#+end_src

Now, let's take a copy for the original named configuration file.
#+begin_src sh
$ sudo mv /etc/named.conf /etc/named.conf.bak
#+end_src
** The Configration file
First, let's start by creating a acl for our VM, we will call it =trusted=, and it will define all the trusted VM that we want to use our DNS server.
In this case we will use all the VM in our subnet =10.10.0.0/24=, and also the =loopback= interface
#+begin_src conf
# Limit access to local network and homelab LAN
acl "trusted" {
	127.0.0.0/8;
	10.10.0.0/24;
};
#+end_src
Listen only on =loopback=, and the IP address of the Master DNS server, in this case =10.10.0.2=
#+begin_src conf
...
options {

	listen-on port 53 { 127.0.0.1; {{ ip_addresses['admins']['master'] }}; }; ## MASTER
...
#+end_src
Allow recursion, and only on our =trusted= VMs
#+begin_src conf
recursion yes;
allow-recursion { trusted; };
allow-query     { trusted; };
allow-transfer { localhost; 10.10.0.3; }; ## SLAVE
#+end_src
Logging configuration
#+begin_src conf
logging {
        channel default_debug {
                file "data/named.run";
                severity dynamic;
        };
        channel "common_log" {
        		file "/var/log/named/named.log" versions 10 size 5m;
        		severity dynamic;
        		print-category yes;
        		print-severity yes;
        		print-time yes;
        	};
        	category default { "common_log"; };
        	category general { "common_log"; };
        	category queries { "common_log"; };
        	category client { "common_log"; };
        	category security { "common_log"; };
        	category query-errors { "common_log"; };
        	category lame-servers { null; };
};
#+end_src
And then, our forward and reverse zones
#+begin_src conf
zone "." IN {
	type hint;
	file "named.ca";
};

# Internal zone definitions
zone "hl.test" {
	type master;
	file "data/db.hl.test";
	allow-update { key rndc-key; };
	notify yes;
};

zone "0.10.10.in-addr.arpa" {
	type master;
	file "data/db.0.10.10";
	allow-update { key rndc-key; };
	notify yes;
};
#+end_src

* Configure Slave DNS Server 
* Configure Clients
#+begin_src sh
$ sudo nmcli c mod enp1s0 ipv4.dns '10.10.0.2 10.10.0.3' ipv4.dns_search 'hl.test'
$ sudo nmcli c down enp1s0 ; sudo nmcli c up enp1s0
#+end_src
Let's check our =/etc/resolv.conf= file
#+begin_src sh :results none :exports results
sudo cat /etc/resolv.conf 
#+end_src

#+RESULTS:
: # Generated by NetworkManager
: search hl.test
: nameserver 10.10.0.2
: nameserver 10.10.0.3
