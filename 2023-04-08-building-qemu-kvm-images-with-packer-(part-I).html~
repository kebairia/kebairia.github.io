<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2023-04-11 Tue 20:24 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Building Qemu-Kvm Images With Packer (Part I)</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Zakaria.K" />
<meta name="keywords" content="packer,linux" />
<link rel="stylesheet"href="css/main.css" type="text/css" />
</head>
<body>
<div id="content">
<h1 class="title">Building Qemu-Kvm Images With Packer (Part I)
<br />
<span class="subtitle">Building Rocky Linux 9 VM Images with Packer</span>
</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org40d20cf">1. Introduction</a></li>
<li><a href="#org4723c71">2. Prerequisites</a></li>
<li><a href="#org2635129">3. Installing Packer</a></li>
<li><a href="#org769554a">4. Write Packer Templates with HCL2</a></li>
<li><a href="#org30cf5d8">5. Building RockyLinux image</a>
<ul>
<li><a href="#org822af4f">5.1. Kickstart file</a></li>
<li><a href="#org1f77f3f">5.2. Building the image</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div class="date">
<p>
11 Apr 2023 Sat
</p>

</div>
<div id="outline-container-org40d20cf" class="outline-2">
<h2 id="org40d20cf"><span class="section-number-2">1</span> Introduction</h2>
<div class="outline-text-2" id="text-1">
<p>
We are going to create a RockyLinux image using Packer.
</p>

<p>
Creating your own VM image can significantly speed up the provisioning of new VMs whenever you need them.
</p>

<p>
Instead of repeatedly installing the operating system, we'll build VM images for Rocky Linux 9 and Ubuntu 22.04, with our own configuration, this will ensure consistency across our infrastructure.
</p>

<p>
Part 1 covers building a <b>Rocky Linux 9</b> image with Packer, while Part 2 focuses on <b>Ubuntu 22.04</b>
</p>
</div>
</div>

<div id="outline-container-org4723c71" class="outline-2">
<h2 id="org4723c71"><span class="section-number-2">2</span> Prerequisites</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>We need a server with KVM installed on it</li>
<li>Packer installed on you system</li>
<li>ISO file for the image you want to build ( in our case, we are using <b><a href="https://rockylinux.org/download">RockyLinux9.1</a></b>)</li>
</ul>
</div>
</div>

<div id="outline-container-org2635129" class="outline-2">
<h2 id="org2635129"><span class="section-number-2">3</span> Installing Packer</h2>
<div class="outline-text-2" id="text-3">
<p>
Installing Packer is a straightforward process. Simply visit the <a href="https://developer.hashicorp.com/packer/downloads">official documentation</a>, where you can find the appropriate version of Packer for your operating system.
</p>

<p>
I'm using Arch Linux, and Packer is already available in the Arch repos.
</p>

<p>
We will install <code>qemu-ui-gtk</code> as well, this will enable us to easily monitor Packer's installation of the operating system through a graphical user interface.
</p>

<div class="org-src-container">
<pre class="src src-bash">$ sudo pacman -S packer qemu-ui-gtk --noconfirm
</pre>
</div>
</div>
</div>
<div id="outline-container-org769554a" class="outline-2">
<h2 id="org769554a"><span class="section-number-2">4</span> Write Packer Templates with HCL2</h2>
<div class="outline-text-2" id="text-4">
<p>
HashiCorp has developed its own configuration language, known as the <b>HashiCorp Configuration Language (HCL)</b>, which is utilized in its suite of tools.
</p>

<p>
HCL is in version 2, and we are going to use it to create our own VM image template.
</p>

<p>
Each virtualization platform has it's own plugin which is called a <b>builder</b> in Packer's term.
</p>

<p>
For our Qemu platform, we'll need to use the <b>QEMU</b> builder plugin, which you can find on <a href="https://github.com/hashicorp/packer-plugin-qemu">this page</a>.
</p>

<p>
We will create a file named <code>main.pkr.hcl</code>, it will serve as our primary template.
</p>

<div class="org-src-container">
<pre class="src src-bash" id="orgecd01b4">touch main.pkr.hcl
</pre>
</div>

<p>
Let's install qemu's plugin. Add this to <code>main.pkr.hcl</code>
</p>

<div class="org-src-container">
<pre class="src src-hcl">packer {
  required_plugins {
    qemu = {
      version = " &gt;= 1.0.9"
      source  = "github.com/hashicorp/qemu"
    }
  }
}
</pre>
</div>

<p>
Run this command
</p>
<div class="org-src-container">
<pre class="src src-bash">packer init main.pkr.hcl
</pre>
</div>

<p>
This command is used to initiate our Packer template, which is basically downloading the necessary builder binaries.
</p>
</div>
</div>
<div id="outline-container-org30cf5d8" class="outline-2">
<h2 id="org30cf5d8"><span class="section-number-2">5</span> Building RockyLinux image</h2>
<div class="outline-text-2" id="text-5">
<p>
Packer templates consist of several built-in blocks, each serving as a container for configuration settings.
The most important blocks that we are going to use here are the following:
</p>

<ul class="org-ul">
<li><code>build</code> blocks contain configuration for a specific combination of builders, provisioners, and post-processors used to create a specific image artifact.</li>

<li><code>source</code> blocks contain configuration for builder plugins, including hardware and resource allocation settings such as type of hardware, RAM and CPU requirements.
Each source block has a unique name that can be referenced in the <code>build</code> block.</li>

<li><code>provisioner</code> blocks contain your provisionners, like shell scripts, Ansible playbook..etc.
These blocks are nested inside of a <code>build</code> block.</li>
</ul>

<div class="note">
<p>
Recently, a kernel panic has occurred while attempting to build a RockyLinux9.X image. As noted in <a href="https://github.com/hashicorp/packer-plugin-qemu/issues/76%20">this issue</a>, adding the <code>-cpu host</code> flag to the <code>qemuargs</code> section can resolve this issue.
</p>

</div>
<div class="org-src-container">
<pre class="src src-hcl" id="org3877aab"># Define QEMU source for rocky
source "qemu" "rocky" {
  vm_name                 = "rocky-base-image.qcow2"
  http_directory          = "./http"
  output_directory        = "./artifacts"
  iso_url                 = "&lt;Put your ISO URL Here"
  iso_checksum            = "sha256:Put ISO checksum Here"
  format                  = "qcow2"
  accelerator             = "kvm"
  net_device              = "virtio-net"
  disk_interface          = "virtio"
  disk_size               = "25G"
  memory                  = 1024
  cpus                    = 2
  headless                = false
  boot_wait               = "5s"
  shutdown_command        = "echo admin | sudo -S -E shutdown -P now"
  ssh_username            = "admin"
  ssh_password            = "admin"
  ssh_timeout             = "60m"
  ssh_handshake_attempts  = 2000
<span id="coderef-Bootstrapping with a Kickstart Config File" class="coderef-off">  # (Bootstrapping with a Kickstart Config File)</span>
  boot_command = [
    "&lt;up&gt;&lt;wait&gt;&lt;tab&gt;&lt;wait&gt; net.ifnames=0 biosdevname=0 inst.text inst.ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg&lt;enter&gt;&lt;wait&gt;"] 
  qemuargs = [
    [ "-m", "1024M" ],
    [ "-smp", "2" ],
    [ "-cpu", "host" ]
  ]
}

# Define build process
build {
  sources = ["source.qemu.rocky"]
  # Execute shell scripts
  provisioner "shell" {
    scripts               = ["../scripts/configs.sh"]
    expect_disconnect     = true
  }
}
</pre>
</div>

<p>
In the <code>build</code> block, we can reference our source block by it's name <code>source.qemu.rocky</code>.
</p>

<p>
In the <code>provisioner</code> block, we used a shell script called <code>configs.sh</code>.
</p>
</div>
<div id="outline-container-org822af4f" class="outline-3">
<h3 id="org822af4f"><span class="section-number-3">5.1</span> Kickstart file</h3>
<div class="outline-text-3" id="text-5-1">
<p>
Packer initiates its HTTP server at boot time to serve configuration files, we'll create a directory named <code>http</code> and store our Kickstart configuration file within. Then, we can reference the Kickstart file with the <a href="#coderef-Bootstrapping with a Kickstart Config File" class="coderef" onmouseover="CodeHighlightOn(this, 'coderef-Bootstrapping with a Kickstart Config File');" onmouseout="CodeHighlightOff(this, 'coderef-Bootstrapping with a Kickstart Config File');">boot command</a>.
</p>

<div class="org-src-container">
<pre class="src src-bash" id="orgd795500">mkdir http
</pre>
</div>

<p>
Create a kickstart file with the following content, (or any content you want).
</p>
<details><summary>Kickstart file content</summary>
<div class="org-src-container">
<pre class="src src-conf"><span style="font-weight: bold; font-style: italic;">#</span><span style="font-weight: bold; font-style: italic;">Global </span>
cdrom
lang en_US.UTF-8
keyboard us

<span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Network</span>
<span style="font-weight: bold; font-style: italic;">network --bootproto</span>=dhcp --device=eth0 --noipv6 --onboot=on

<span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Users</span>
rootpw --plaintext admin
<span style="font-weight: bold; font-style: italic;">user --name</span>=admin --plaintext --password=admin

timezone UTC
<span style="font-weight: bold; font-style: italic;">bootloader --location</span>=mbr --timeout=1 --append=<span style="font-style: italic;">"net.ifnames=0 biosdevname=0"</span>
text
skipx
zerombr
clearpart --all --initlabel
autopart --nohome --noboot --nolvm

<span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">System settings</span>
firewall --enabled
selinux --enforcing
firstboot --disabled
reboot --eject
<span style="font-weight: bold; font-style: italic;">services --enabled</span>=<span style="font-style: italic;">"NetworkManager,sshd,chronyd"</span>

<span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Packages</span>
%packages --ignoremissing --excludedocs
openssh-clients
sudo
vim
bash-completion
selinux-policy-devel
wget
nfs-utils
net-tools
tar
bzip2
deltarpm
rsync
dnf-utils
redhat-lsb-core
elfutils-libelf-devel
-fprintd-pam
-intltool
-iwl*-firmware
-microcode_ctl
%end

<span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Post-installation</span>
<span style="font-weight: bold; font-style: italic;">%post --interpreter</span>=/bin/bash
<span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Sudo configuration</span>
echo <span style="font-style: italic;">'Defaults:admin !requiretty'</span> &gt; /etc/sudoers.d/admin
echo <span style="font-style: italic;">'%admin ALL=(ALL) NOPASSWD: ALL'</span> &gt;&gt; /etc/sudoers.d/admin
chmod 440 /etc/sudoers.d/admin

<span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">SSH configuration</span>
sed -i <span style="font-style: italic;">'s/^#PubkeyAuthentication yes/PubkeyAuthentication yes/'</span> /etc/ssh/sshd_config
sed -i <span style="font-style: italic;">'s/^#PermitRootLogin prohibit-password/PermitRootLogin yes/'</span> /etc/ssh/sshd_config
echo <span style="font-style: italic;">"PubkeyAcceptedKeyTypes=+ssh-rsa"</span> &gt;&gt; /etc/ssh/sshd_config
systemctl enable sshd
systemctl restart sshd
%end

</pre>
</div>
</details>
</div>
</div>
<div id="outline-container-org1f77f3f" class="outline-3">
<h3 id="org1f77f3f"><span class="section-number-3">5.2</span> Building the image</h3>
<div class="outline-text-3" id="text-5-2">
<p>
Let's first validate our template.
</p>
<div class="org-src-container">
<pre class="src src-bash">packer validate .
</pre>
</div>

<p>
And then build.
</p>
<div class="org-src-container">
<pre class="src src-bash"><span style="font-weight: bold;">export</span> <span style="font-weight: bold; font-style: italic;">PACKER_LOG</span>=1 &amp;&amp; packer build .
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">

<p class="postamble"> 

<a href="http://creativecommons.org/licenses/by-sa/4.0/" class="crc">
<img src="img/crc.png" alt="Creative Commons License" title="Creative Commons License" />

<a href="https://www.linkedin.com/in/zakaria-kebairia/" title="LinkedIn account" class="social">
<img src="img/social/linkedin-icon-logo.svg" width="45" alt="LinkedIn Account" />
</a>

<a href="https://twitter.com/z_kebairia" title="Twitter Account" class="social">
<img src="img/social/twitter-logo.svg" width="40" alt="Twitter Account" /> </a>

<a href="https://www.youtube.com/channel/UC7OqXJDFQI8_WFC6WnsWCrg" title="Youtube Account" class="social">
<img src="img/social/youtube-black-logo.svg" width="40" alt="Youtube Account" /> </a>

<a href="https://www.github.com/kebairia" title="GitHub Account" class="social">
<img src="img/social/github.svg" width="43" alt="GitHub Account" /> </a>

<br>

<p class="credit">
Copyright &copy  2021 Zakaria Kebairia
<br>
Content licensed <a href="http://creativecommons.org/licenses/by-sa/4.0/">CC-BY-SA 4.0</a> unless otherwise noted.

</p>
</div>
</body>
</html>
